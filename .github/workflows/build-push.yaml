name: 'Build'

on:
  pull_request:
    types:
      - closed
    branches:
      - develop
      - master
jobs:
  init:
    name: Initialization
    runs-on: ubuntu-latest
    outputs:
      DOCKER_TAGS: ${{ steps.init.outputs.DOCKER_TAGS }}
      GIT_TAG: ${{ steps.init.outputs.GIT_TAG }}
      COMMIT_SHA: ${{ steps.init.outputs.COMMIT_SHA }}
      SHOULD_TAG_MASTER_BRANCH: ${{ steps.init.outputs.SHOULD_TAG_MASTER_BRANCH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # To be able to use git describe
        with:
          fetch-depth: 0
      - name: Compute event type
        id: event-type
        run: |
          [[ $GITHUB_EVENT_NAME == 'pull_request' && $GITHUB_BASE_REF == 'master' && $GITHUB_HEAD_REF == 'develop' ]] && MERGE_FROM_DEVELOP_TO_MASTER=true || MERGE_FROM_DEVELOP_TO_MASTER=false
          [[ $GITHUB_EVENT_NAME == 'pull_request' && $GITHUB_BASE_REF == 'master' && $GITHUB_HEAD_REF != 'develop' ]] && MERGE_FROM_ANY_BRANCH_TO_MASTER=true || MERGE_FROM_ANY_BRANCH_TO_MASTER=false
          [[ $GITHUB_EVENT_NAME == 'pull_request' && $GITHUB_BASE_REF == 'develop' ]] && MERGE_FROM_ANY_BRANCH_TO_DEVELOP=true || MERGE_FROM_ANY_BRANCH_TO_DEVELOP=false
          echo "MERGE_FROM_DEVELOP_TO_MASTER=$MERGE_FROM_DEVELOP_TO_MASTER" >> $GITHUB_OUTPUT
          echo "MERGE_FROM_ANY_BRANCH_TO_MASTER=$MERGE_FROM_ANY_BRANCH_TO_MASTER" >> $GITHUB_OUTPUT
          echo "MERGE_FROM_ANY_BRANCH_TO_DEVELOP=$MERGE_FROM_ANY_BRANCH_TO_DEVELOP" >> $GITHUB_OUTPUT
      - name: Get current version
        id: current-version
        if: ${{ steps.event-type.outputs.MERGE_FROM_ANY_BRANCH_TO_MASTER == 'true' || steps.event-type.outputs.MERGE_FROM_DEVELOP_TO_MASTER == 'true' }}
        run: |
          echo "CURRENT_VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
      - name: Increment semantic version for MERGE_FROM_ANY_BRANCH_TO_MASTER
        id: next-version-merge-from-any-branch-to-master
        if: ${{ steps.event-type.outputs.MERGE_FROM_ANY_BRANCH_TO_MASTER == 'true' }} 
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${{ steps.current-version.outputs.CURRENT_VERSION }}
          version-fragment: 'bug'
      - name: Increment semantic version for MERGE_FROM_DEVELOP_TO_MASTER
        id: next-version-merge-from-develop-to-master
        if: ${{ steps.event-type.outputs.MERGE_FROM_DEVELOP_TO_MASTER == 'true' }} 
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${{ steps.current-version.outputs.CURRENT_VERSION }}
          version-fragment: 'feature'
      - name: 'Compute required values'
        id: init
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}

          if [$GITHUB_EVENT_NAME == 'pull_request']; then
            BRANCH_NAME=$GITHUB_BASE_REF
          fi

          COMMIT_SHA=$(git rev-parse --short HEAD)
          SHOULD_TAG_MASTER_BRANCH=false
          GIT_TAG=""

          if ${{ steps.event-type.outputs.MERGE_FROM_ANY_BRANCH_TO_MASTER == 'true' }}; then
            DOCKER_TAGS=${{ steps.next-version-merge-from-any-branch-to-master.outputs.next-version }}
            GIT_TAG=$DOCKER_TAGS
            DOCKER_TAGS=$DOCKER_TAGS,latest
            SHOULD_TAG_MASTER_BRANCH=true
          elif ${{ steps.event-type.outputs.MERGE_FROM_DEVELOP_TO_MASTER == 'true' }}; then
            DOCKER_TAGS=${{ steps.next-version-merge-from-develop-to-master.outputs.next-version }}
            GIT_TAG=$DOCKER_TAGS
            SHOULD_TAG_MASTER_BRANCH=true
            DOCKER_TAGS=$DOCKER_TAGS,latest
          elif ${{ steps.event-type.outputs.MERGE_FROM_ANY_BRANCH_TO_DEVELOP == 'true' }}; then
            DOCKER_TAGS=pre-release-$(git describe)
            DOCKER_TAGS=$DOCKER_TAGS,latest-pre-release

          # Manual GH Actions
          elif ${{ github.event_name == 'workflow_dispatch'}}; then
            DOCKER_TAGS=manual-$COMMIT_SHA
            if ${{ github.event.inputs.docker-image-tag != '' }}; then
              DOCKER_TAGS=${{ github.event.inputs.docker-image-tag }}
            fi
          fi

          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_OUTPUT
          echo "GIT_TAG=$GIT_TAG" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "SHOULD_TAG_MASTER_BRANCH=$SHOULD_TAG_MASTER_BRANCH" >> $GITHUB_OUTPUT

  build-push-backend:
    name: Build & push backend docker image
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Compute full docker tags
        id: full-docker-tags
        env:
          DOCKER_TAG_PREFIX: "levoicelab/labelit-backend:"
        run: |
          DOCKER_TAGS=$(echo "${{ needs.init.outputs.DOCKER_TAGS }}" \
            | sed 's!,!,${{ env.DOCKER_TAG_PREFIX }}!g') 
          DOCKER_TAGS=${{ env.DOCKER_TAG_PREFIX }}$DOCKER_TAGS
          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          file: Dockerfile.backend.prod
          push: true
          tags: ${{ steps.full-docker-tags.outputs.DOCKER_TAGS }}

  build-push-frontend:
    name: Build & push frontend docker image
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Compute full docker tags
        id: full-docker-tags
        env:
          DOCKER_TAG_PREFIX: "levoicelab/labelit-frontend:"
        run: |
          DOCKER_TAGS=$(echo "${{ needs.init.outputs.DOCKER_TAGS }}" \
            | sed 's!,!,${{ env.DOCKER_TAG_PREFIX }}!g') 
          DOCKER_TAGS=${{ env.DOCKER_TAG_PREFIX }}$DOCKER_TAGS
          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          file: Dockerfile.frontend.prod
          push: true
          tags: ${{ steps.full-docker-tags.outputs.DOCKER_TAGS }}
  tag-master-branch:
    name: Tag git repository
    if: ${{ needs.init.outputs.SHOULD_TAG_MASTER_BRANCH == 'true' }}
    runs-on: ubuntu-latest
    needs: [
      init,
      build-push-backend,
      build-push-frontend,
    ]
    env:
      GIT_TAG: ${{ needs.init.outputs.GIT_TAG }}
    steps:
      - uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          create_annotated_tag: true
          custom_tag: ${{ env.GIT_TAG }}
          tag_prefix: ""
          github_token: ${{ secrets.GH_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  merge-master-to-develop:
    name: Merge master branch to develop
    if: ${{ needs.init.outputs.SHOULD_TAG_MASTER_BRANCH == 'true' }}
    runs-on: ubuntu-latest
    needs: [
      tag-master-branch,
    ]
    steps:
      - uses: actions/checkout@v3
      - name: Merge master -> develop
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: master
          target_branch: develop
          github_token: ${{ secrets.GH_TOKEN }}
