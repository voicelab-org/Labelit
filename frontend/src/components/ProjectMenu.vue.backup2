<template>
  <div>
    <!--
    <v-menu bottom offset-y>
        <v-btn slot="activator">Menu</v-btn>

        <v-list>
          <v-list-tile @click.stop="menuDialogB = true">
            <v-list-tile-title>Using click.stop</v-list-tile-title>
            <v-dialog v-model="menuDialogB">
              <v-card>
                <v-toolbar>
                  <v-toolbar-title>Simple Dialog says hi</v-toolbar-title>
                  <v-spacer></v-spacer>
                  <v-btn dark @click="menuDialogB = false">Close</v-btn>
                </v-toolbar>
                <v-card-text>Oh, here's some stuff</v-card-text>
              </v-card>
            </v-dialog>
          </v-list-tile>
        </v-list>
      </v-menu>
      -->
    <v-menu
        open-on-hover
        offset-y
        :close-on-content-click="false"
    >
      <!--<template v-slot:activator>
            <span>
                <v-icon>mdi-dots-vertical</v-icon>
            </span>
      </template>-->
      <div v-slot:activator="{ on }">
                <v-icon>mdi-dots-vertical</v-icon>
            </div>
      <v-card>
        <v-list>
          <v-list-item>
            <a @click="toggleArchived"> {{ archiveAction }} </a>
          </v-list-item>
          <v-list-item @click.stop="show_dialog = true">
            <project-manager
                @changed="$emit('changed')"
                :project="project"
                v-model="show_dialog"
            /><!--@click.stop-->
          </v-list-item>
        </v-list>
      </v-card>
    </v-menu>
  </div>
</template>

<script>

import ProjectManager from "./ProjectManager";
import ProjectService from "@/services/project.service";

export default {
  name: "ProjectMenu",
  components: {
    ProjectManager,
  },
  props: {
    value: {
      type: Object,
      required: true,
    },
  },
  data() {
    return {
      project: this.value,
      show_dialog: false,
    }
  },
  computed: {
    archiveAction() {
      if (this.project.archived) {
        return "Unarchive"
      }
      return "Archive"
    },
  },
  watch: {
    project: {
      deep: true,
      handler() {
        this.$emit('input', this.project)
      },
    },
  },
  methods: {
    toggleArchived() {
      ProjectService.updateProject(
          this.project.id,
          {
            archived: !this.project.archived
          }
      ).then(() => {
        this.project.archived = !this.project.archived
      })
    },
  },
}
</script>

<style scoped>

</style>