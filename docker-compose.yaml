version: "3.7"

services:
  postgres:
    image: postgres:15-alpine
    ports:
      - 5432:5432
    volumes:
      - labelit_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=labelit_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 5050:80
    volumes:
      - pga4volume:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: user@labelit.com
      PGADMIN_DEFAULT_PASSWORD: labelit
      SERVER_PORT: 80
    depends_on:
      - postgres

  minio:
    image: minio/minio:RELEASE.2022-10-24T18-35-07Z.hotfix.ce525fdaf
    #image: minio/minio:RELEASE.2023-01-02T09-40-09Z #had some issue with this ver
    ports:
      - 9000:9000
    volumes:
      - labelit_s3data:/export
    environment:
      MINIO_ROOT_USER: EXAMPLEKEYID
      MINIO_ROOT_PASSWORD: EXAMPLEKEYCONTENT
    command: server /export

  backend:
    build:
      context: backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/code
    environment:
      DJANGO_DEBUG: "true"
      DB_HOST: postgres
      DB_NAME: labelit_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      AUDIO_FILE_STORAGE: storages.backends.s3boto3.S3Boto3Storage
      AWS_AUDIO_STORAGE_BUCKET_NAME: labelit-audio-bucket
      AWS_SOURCE_AUDIO_STORAGE_BUCKET_NAME: labelit-audio-source-bucket
      AWS_REGION_NAME: eu-west-1
      AWS_ENDPOINT_URL: http://minio:9000/
      AWS_ACCESS_KEY_ID: EXAMPLEKEYID
      AWS_SECRET_ACCESS_KEY: EXAMPLEKEYCONTENT
      AWS_S3_OPTIONS: local
      IMAGE_FILE_STORAGE: storages.backends.s3boto3.S3Boto3Storage
      AWS_IMAGE_STORAGE_BUCKET_NAME: uploaded-images
      S3_DIRECT_SERVE: "false" # was true
      SEGMENT_EXPIRATION_TIME_IN_SECONDS: 3600
      #SEGMENT_EXPIRATION_TIME_IN_SECONDS: 0  # for easier debugging
      SECRET_KEY: "o4_7tyfr^o4^4nx_(-6umggzwo%ksx32y3x^amn7o&c7*o-q!d"
      ALLOWED_HOST: "localhost"
      PYTHONUNBUFFERED: "unbuffered"
    ports:
      - 8000:8000
      - 5678:5678
    depends_on:
      - postgres

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
    ports:
      - 8080:8080
      - 9229:9229
    depends_on:
      - backend

volumes:
  labelit_data:
  pga4volume:
  labelit_s3data:
